package com.interview.tree.fundamentals;

import com.interview.tree.fundamentals.level0.Node;
import com.interview.tree.fundamentals.level0.TreeUtils;
import org.junit.Assert;
import org.junit.Test;

public class TreeUtilsTest {

    @Test
    public void preorderTraversalTest() {
        Node root = null;
        int inputData[] = new int[]{1, 2, 5, 3, 6, 4};
        int expectedOutput[] = new int[]{1, 2, 5, 3, 4, 6};

//        int inputData[] = new int[]{1, 14, 3, 7, 4, 5, 15, 6, 13, 10, 11, 2, 12, 8, 9};
//        int expectedOutput[] = new int[]{1, 14, 3, 2, 7, 4, 5, 6, 13, 10, 8, 9, 11, 12, 15};

//        int inputData[] = new int[]{108 ,253 ,290 ,355 ,288 ,180 ,323 ,109 ,430 ,162 ,148 ,304 ,312 ,50 ,98 ,267 ,57 ,195 ,206 ,131 ,276 ,419 ,207 ,366 ,102 ,337 ,259 ,390 ,272 ,243 ,86 ,286 ,255 ,398 ,130 ,95 ,41 ,392 ,351 ,191 ,18 ,313 ,216 ,342 ,433 ,145 ,54 ,184 ,61 ,365 ,395 ,301 ,213 ,318 ,442 ,315 ,73 ,193 ,303 ,172 ,371 ,43 ,384 ,431 ,411 ,96 ,425 ,146 ,347 ,55 ,10 ,149 ,292 ,189 ,244 ,382 ,340 ,91 ,64 ,111 ,234 ,368 ,260 ,218 ,94 ,293 ,40 ,29 ,297 ,277 ,174 ,144 ,372 ,196 ,179 ,412 ,170 ,134 ,51 ,2 ,220 ,13 ,82 ,59 ,92 ,9 ,306 ,87 ,181 ,200 ,104 ,56 ,32 ,402 ,429 ,271 ,152 ,26 ,302 ,65 ,49 ,107 ,333 ,432 ,334 ,246 ,239 ,367 ,11 ,273 ,257 ,237 ,204 ,324 ,164 ,256 ,69 ,186 ,68 ,192 ,62 ,24 ,436 ,205 ,129 ,426 ,296 ,222 ,407 ,31 ,418 ,89 ,71 ,440 ,380 ,3 ,90 ,404 ,74 ,438 ,275 ,370 ,413 ,393 ,291 ,60 ,99 ,21 ,133 ,443 ,163 ,417 ,84 ,77 ,357 ,427 ,369 ,103 ,227 ,235 ,307 ,231 ,44 ,70 ,281 ,314 ,121 ,300 ,38 ,128 ,362 ,294 ,378 ,375 ,110 ,105 ,132 ,178 ,346 ,37 ,212 ,399 ,165 ,445 ,197 ,45 ,326 ,80 ,23 ,136 ,15 ,310 ,338 ,403 ,250 ,261 ,410 ,158 ,345 ,20 ,242 ,409 ,444 ,379 ,1 ,283 ,377 ,183 ,331 ,125 ,118 ,322 ,166 ,219 ,401 ,217 ,348 ,100 ,53 ,263 ,230 ,249 ,353 ,88 ,258 ,319 ,363 ,420 ,441 ,224 ,6 ,48 ,150 ,327 ,343 ,161 ,115 ,364 ,284 ,266 ,397 ,236 ,154 ,437 ,336 ,46 ,127 ,16 ,422 ,72 ,119 ,143 ,182 ,4 ,394 ,157 ,159 ,376 ,124 ,137 ,141 ,352 ,434 ,245 ,361 ,439 ,349 ,359 ,325 ,298 ,396 ,280 ,173 ,116 ,33 ,175 ,171 ,279 ,25 ,241 ,114 ,203 ,374 ,126 ,332 ,354 ,190 ,335 ,414 ,405 ,320 ,223 ,176 ,63 ,36 ,215 ,435 ,202 ,232 ,76 ,389 ,22 ,321 ,42 ,424 ,209 ,167 ,264 ,383 ,240 ,135 ,138 ,211 ,381 ,309 ,251 ,52 ,12 ,248 ,282 ,155 ,97 ,278 ,93 ,400 ,8 ,188 ,7 ,187 ,113 ,228 ,142 ,185 ,120 ,387 ,160 ,254 ,391 ,269 ,416 ,406 ,287 ,198 ,81 ,39 ,153 ,341 ,305 ,229 ,247 ,168 ,274 ,19 ,27 ,386 ,147 ,123 ,156 ,233 ,5 ,194 ,169 ,35 ,221 ,17 ,199 ,311 ,415 ,75 ,208 ,67 ,421 ,78 ,308 ,58 ,177 ,262 ,122 ,225 ,106 ,289 ,151 ,47 ,140 ,344 ,112 ,358 ,101 ,329 ,360 ,388 ,385 ,210 ,330 ,214 ,83 ,252 ,30 ,285 ,408 ,226 ,350 ,373 ,270 ,317 ,79 ,423 ,28 ,295 ,328 ,66 ,238 ,356 ,265 ,117 ,139 ,14 ,299 ,428 ,316 ,34 ,201 ,85 ,268 ,339};
//        int expectedOutput[] = new int[]{108  ,50 ,41 ,18 ,10 ,2 ,1 ,9 ,3 ,6 ,4 ,5 ,8 ,7 ,13 ,11 ,12 ,15 ,14 ,16 ,17 ,40 ,29 ,26 ,24 ,21 ,20 ,19 ,23 ,22 ,25 ,27 ,28 ,32 ,31 ,30 ,38 ,37 ,33 ,36 ,35 ,34 ,39 ,43 ,42 ,49 ,44 ,45 ,48 ,46 ,47 ,98 ,57 ,54 ,51 ,53 ,52 ,55 ,56 ,86 ,61 ,59 ,58 ,60 ,73 ,64 ,62 ,63 ,65 ,69 ,68 ,67 ,66 ,71 ,70 ,72 ,82 ,74 ,77 ,76 ,75 ,80 ,78 ,79 ,81 ,84 ,83 ,85 ,95 ,91 ,87 ,89 ,88 ,90 ,94 ,92 ,93 ,96 ,97 ,102 ,99 ,100 ,101 ,104 ,103 ,107 ,105 ,106 ,253 ,180 ,109 ,162 ,148 ,131 ,130 ,111 ,110 ,129 ,121 ,118 ,115 ,114 ,113 ,112 ,116 ,117 ,119 ,120 ,128 ,125 ,124 ,123 ,122 ,127 ,126 ,145 ,144 ,134 ,133 ,132 ,136 ,135 ,143 ,137 ,141 ,138 ,140 ,139 ,142 ,146 ,147 ,149 ,152 ,150 ,151 ,158 ,154 ,153 ,157 ,155 ,156 ,161 ,159 ,160 ,172 ,170 ,164 ,163 ,165 ,166 ,167 ,168 ,169 ,171 ,174 ,173 ,179 ,178 ,175 ,176 ,177 ,195 ,191 ,184 ,181 ,183 ,182 ,189 ,186 ,185 ,188 ,187 ,190 ,193 ,192 ,194 ,206 ,196 ,200 ,197 ,198 ,199 ,204 ,203 ,202 ,201 ,205 ,207 ,243 ,216 ,213 ,212 ,209 ,208 ,211 ,210 ,215 ,214 ,234 ,218 ,217 ,220 ,219 ,222 ,221 ,227 ,224 ,223 ,225 ,226 ,231 ,230 ,228 ,229 ,232 ,233 ,239 ,237 ,235 ,236 ,238 ,242 ,241 ,240 ,244 ,246 ,245 ,250 ,249 ,248 ,247 ,251 ,252 ,290 ,288 ,267 ,259 ,255 ,254 ,257 ,256 ,258 ,260 ,261 ,263 ,262 ,266 ,264 ,265 ,276 ,272 ,271 ,269 ,268 ,270 ,273 ,275 ,274 ,286 ,277 ,281 ,280 ,279 ,278 ,283 ,282 ,284 ,285 ,287 ,289 ,355 ,323 ,304 ,301 ,292 ,291 ,293 ,297 ,296 ,294 ,295 ,300 ,298 ,299 ,303 ,302 ,312 ,306 ,305 ,307 ,310 ,309 ,308 ,311 ,313 ,318 ,315 ,314 ,317 ,316 ,322 ,319 ,320 ,321 ,337 ,333 ,324 ,326 ,325 ,331 ,327 ,329 ,328 ,330 ,332 ,334 ,336 ,335 ,351 ,342 ,340 ,338 ,339 ,341 ,347 ,346 ,345 ,343 ,344 ,348 ,349 ,350 ,353 ,352 ,354 ,430 ,419 ,366 ,365 ,357 ,356 ,362 ,361 ,359 ,358 ,360 ,363 ,364 ,390 ,371 ,368 ,367 ,370 ,369 ,384 ,382 ,372 ,380 ,378 ,375 ,374 ,373 ,377 ,376 ,379 ,381 ,383 ,389 ,387 ,386 ,385 ,388 ,398 ,392 ,391 ,395 ,393 ,394 ,397 ,396 ,411 ,402 ,399 ,401 ,400 ,407 ,404 ,403 ,405 ,406 ,410 ,409 ,408 ,412 ,418 ,413 ,417 ,414 ,416 ,415 ,425 ,420 ,422 ,421 ,424 ,423 ,429 ,426 ,427 ,428 ,433 ,431 ,432 ,442 ,436 ,434 ,435 ,440 ,438 ,437 ,439 ,441 ,443 ,445 ,444 };


        for (int i = 0; i < inputData.length; i++)
            root = TreeUtils.insert(root, inputData[i]);

        TreeUtils.preorderTraversal(root);
    }

    @Test
    public void postorderTraversalTest() {
        Node root = null;
        int inputData[] = new int[]{1, 2, 5, 3, 6, 4};
        int expectedOutput[] = new int[]{4, 3, 6, 5, 2, 1};


        for (int i = 0; i < inputData.length; i++)
            root = TreeUtils.insert(root, inputData[i]);

        TreeUtils.postorderTraversal(root);
    }


    @Test
    public void inOrderTraversalTest() {
        Node root = null;
        int inputData[] = new int[]{1, 2, 5, 3, 6, 4};
        int expectedOutput[] = new int[]{1, 2, 3, 4, 5, 6};


        for (int i = 0; i < inputData.length; i++)
            root = TreeUtils.insert(root, inputData[i]);

        TreeUtils.inOrderTraversal(root);
    }

    @Test
    public void heightOfABinaryTreeTest() {
        Node root = null;
        int inputData[] = new int[]{3, 5, 2, 1, 4, 6, 7};
        int expectedOutput = 3;

        //3 1 7 5 4  out 3
        //15 out 0

        for (int i = 0; i < inputData.length; i++)
            root = TreeUtils.insert(root, inputData[i]);

        Assert.assertEquals(expectedOutput, TreeUtils.heightOfABinaryTree(root));
    }


}

