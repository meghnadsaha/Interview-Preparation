package com.interview.backtracking;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

public class SudokuSolverTest {

	@Test
	public void test() {
		SudokuSolver solver = new SudokuSolver();
		char[][] board = { 
				{ '5', '3', '.', '.' ,'7','.','.','.','.'}, 
				{ '6', '.', '.', '1' ,'9','5','.','.','.'}, 
				{ '.', '9', '8', '.' ,'.','.','.','6','.'}, 
				{ '8', '.', '.', '.' ,'6','.','.','.','3'}, 
				{ '4', '.', '.', '8' ,'.','3','.','.','1'}, 
				{ '7', '.', '.', '.' ,'2','.','.','.','6'}, 
				{ '.', '6', '.', '.' ,'.','.','2','8','.'}, 
				{ '.', '.', '.', '4' ,'1','9','.','.','5'}, 
				{ '.', '.', '.', '.' ,'8','.','.','7','9'}

				};

		char[][] board2 = { 
				 {'3', '.', '6', '5', '.', '8', '4', '.', '.'}, 
		         {'5', '2', '.', '.', '.', '.', '.', '.', '.'}, 
		         {'.', '8', '7', '.', '.', '.', '.', '3', '1'}, 
		         {'.', '.', '3', '.', '1', '.', '.', '8', '.'}, 
		         {'9', '.', '.', '8', '6', '3', '.', '.', '5'}, 
		         {'.', '5', '.', '.', '9', '.', '6', '.', '.'}, 
		         {'1', '3', '.', '.', '.', '.', '2', '5', '.'}, 
		         {'.', '.', '.', '.', '.', '.', '.', '7', '4'}, 
		         {'.', '.', '5', '2', '.', '6', '3', '.', '.'} 
		         
		         };
		char[][] board3 = { 
					 { '3','1','6','5','7','8','4','9','2'},
			         { '5','2','9','1','3','4','7','6','8'},
			         { '4','8','7','6','2','9','5','3','1'},
			         { '2','6','3','.','1','5','9','8','7'},
			         { '9','7','4','8','6','.','1','2','5'},
			         { '8','5','1','7','9','2','6','4','3'},
			         { '1','3','8','.','4','7','2','.','6'},
			         { '6','9','2','3','5','1','8','7','4'},
			         { '7','4','5','.','8','6','3','1','.'}					
				};
		char[][] board4 = {
			 { 3, 1, 6, 5, 7, 8, 4, 9, 2 }, 
             { 5, 2, 9, 1, 3, 4, 7, 6, 8 }, 
             { 4, 8, 7, 6, 2, 9, 5, 3, 1 }, 
             { 2, 6, 3, 0, 1, 5, 9, 8, 7 }, 
             { 9, 7, 4, 8, 6, 0, 1, 2, 5 }, 
             { 8, 5, 1, 7, 9, 2, 6, 4, 3 }, 
             { 1, 3, 8, 0, 4, 7, 2, 0, 6 }, 
             { 6, 9, 2, 3, 5, 1, 8, 7, 4 }, 
             { 7, 4, 5, 0, 8, 6, 3, 1, 0 } }; 
		solver.solveSudoku(board);
		solver.solveSudoku(board2);
		solver.solveSudoku(board3);
//		solver.solveSudoku(board4);




	}

}
